# Sample log to show some capability
# Use this information we can reverse the entire encryption.
# 1. The Encryption call to CryptAcquireContext can just be repeated with the logged arguments
# 2. Use generated HCRYPTPROV with logged ALG_ID and HCRYPTKEY (if keyed hash algo – in our  testing this is 0 as RSA is not keyed), to generate the HCRYPTHASH container
# 3. Pass the generated HCRYPTHASH container, along with the logged BYTE * (password), and length of password to add the HASH_VAL to the HCRYPTHASH container
# 4. Pass the generated HCRYPTPROV, logged ALG_ID, generated HCRYPTHASH container and the logged key length to generate the derived session key
# 5. Pass the generated hKey, a generated HCRYPTHASH (not in our case, this is if you want to hash the decrypted data – useful for verifying signature), generated BYTE * that points to the encrypted data (the file to decrypt), and the length of the data to decrypt the data.
# More info at http://ec700.bu.edu/charlie-2/2015/04/02/reversing-ms-crypto-api-encrypt/

16:44:22 871 myCryptAcquireContext(0027F9EC,(null),Microsoft Enhanced Cryptographic Provider v1.0,1,0)
16:44:22 881 myCryptCreateHash(3794c8,8003,0,0,0027F9D4)
16:44:22 881 myCryptHashData(384ad8,0037600A,8,0)
data to hash = password

16:44:22 881 myCryptDeriveKey(3794c8,6801,384ad8,800000,0027F9DC)
hash size = 16
The hash is:  5f 4d cc 3b 5a a7 65 d6 1d 83 27 de b8 82 cf 99 

16:44:22 881 myCryptEncrypt(389f98,0,1,0,0038C038,0027F9D8, 3f0)
data size = 4 KP_ALGID:  01 68 00 00 
data size = 4 KP_BLOCKLEN:  00 00 00 00 
data size = 0KP_CERTIFICATE:  
data size = 4 KP_KEYLEN:  80 00 00 00 
data size = 0 KP_SALT:  
data size = 4 KP_PERMISSIONS:  3b 00 00 00 
